/* eslint-disable unicorn/prefer-module */
module.exports = {
  env: {
    browser: true,
  },
  reportUnusedDisableDirectives: true,
  extends: [
    "eslint:recommended",
    "standard",
    "plugin:unicorn/recommended",
    "plugin:import/recommended",
    "plugin:n/recommended",
    "plugin:eslint-comments/recommended",
    "plugin:prettier/recommended",
    "plugin:jsonc/recommended-with-jsonc",
    "plugin:jsonc/prettier",
    "plugin:yml/recommended",
    "plugin:yml/prettier",
  ],
  ignorePatterns: [
    "*.min.*",
    "dist",
    "build",
    "LICENSE*",
    "fixtures",
    ".nuxt",
    "output",
    ".output",
    "out",
    "coverage",
    "public",
    "temp",
    "auto-import.d.ts",
    "components.d.ts",
    "package-lock.json",
    "pnpm-lock.yaml",
    "yarn.lock",
    "__snapshots__",
    // ignore for in lint-staged
    "*.css",
    "*.png",
    "*.ico",
    "*.toml",
    "*.patch",
    "*.txt",
    "*.crt",
    "*.key",
    "Dockerfile",
    "vendor/*",
    // force include
    "!.github",
    "!.vitepress",
    "!.vscode",
    // force exclude
    "**/.vitepress/cache",
  ],
  plugins: ["html", "unused-imports"],
  settings: {
    "import/resolver": {
      node: { extensions: [".js", ".jsx", ".mjs", ".ts", ".tsx", ".d.ts"] },
    },
    node: {
      version: ">=16.0.0",
    },
  },
  overrides: [
    {
      files: ["*.json", "*.json5", "*.jsonc"],
      parser: "jsonc-eslint-parser",
    },
    {
      files: ["*.yaml", "*.yml"],
      parser: "yaml-eslint-parser",
    },
    // package.json sorting
    {
      files: ["package.json"],
      parser: "jsonc-eslint-parser",
      rules: {
        "jsonc/sort-keys": [
          "error",
          {
            pathPattern: "^$",
            order: [
              "publisher",
              "name",
              "displayName",
              "type",
              "version",
              "private",
              "packageManager",
              "description",
              "author",
              "license",
              "funding",
              "homepage",
              "repository",
              "bugs",
              "keywords",
              "categories",
              "sideEffects",
              "exports",
              "main",
              "module",
              "unpkg",
              "jsdelivr",
              "types",
              "typesVersions",
              "bin",
              "icon",
              "files",
              "engines",
              "activationEvents",
              "contributes",
              "scripts",
              "peerDependencies",
              "peerDependenciesMeta",
              "dependencies",
              "optionalDependencies",
              "devDependencies",
              "pnpm",
              "overrides",
              "resolutions",
              "husky",
              "simple-git-hooks",
              "lint-staged",
              "eslintConfig",
              "prettier",
              "stylelint",
            ],
          },
          {
            pathPattern: "^(?:dev|peer|optional|bundled)?[Dd]ependencies$",
            order: { type: "asc" },
          },
          {
            pathPattern: "^resolutions$",
            order: { type: "asc" },
          },
          {
            pathPattern: "^pnpm.overrides$",
            order: { type: "asc" },
          },
          {
            pathPattern: "^exports.*$",
            order: ["types", "import", "require", "default"],
          },
        ],
      },
    },
    // tsconfig.json sorting
    {
      files: ["**/tsconfig.json", "**/tsconfig.*.json"],
      parser: "jsonc-eslint-parser",
      rules: {
        "jsonc/sort-keys": [
          "error",
          {
            pathPattern: "^$",
            order: ["extends", "compilerOptions", "references", "files", "include", "exclude"],
          },
          {
            pathPattern: "^compilerOptions$",
            order: [
              /* Projects */
              "incremental",
              "composite",
              "tsBuildInfoFile",
              "disableSourceOfProjectReferenceRedirect",
              "disableSolutionSearching",
              "disableReferencedProjectLoad",
              /* Language and Environment */
              "target",
              "lib",
              "jsx",
              "experimentalDecorators",
              "emitDecoratorMetadata",
              "jsxFactory",
              "jsxFragmentFactory",
              "jsxImportSource",
              "reactNamespace",
              "noLib",
              "useDefineForClassFields",
              "moduleDetection",
              /* Modules */
              "module",
              "rootDir",
              "moduleResolution",
              "baseUrl",
              "paths",
              "rootDirs",
              "typeRoots",
              "types",
              "allowUmdGlobalAccess",
              "moduleSuffixes",
              "allowImportingTsExtensions",
              "resolvePackageJsonExports",
              "resolvePackageJsonImports",
              "customConditions",
              "resolveJsonModule",
              "allowArbitraryExtensions",
              "noResolve",
              /* JavaScript Support */
              "allowJs",
              "checkJs",
              "maxNodeModuleJsDepth",
              /* Emit */
              "declaration",
              "declarationMap",
              "emitDeclarationOnly",
              "sourceMap",
              "inlineSourceMap",
              "outFile",
              "outDir",
              "removeComments",
              "noEmit",
              "importHelpers",
              "importsNotUsedAsValues",
              "downlevelIteration",
              "sourceRoot",
              "mapRoot",
              "inlineSources",
              "emitBOM",
              "newLine",
              "stripInternal",
              "noEmitHelpers",
              "noEmitOnError",
              "preserveConstEnums",
              "declarationDir",
              "preserveValueImports",
              /* Interop Constraints */
              "isolatedModules",
              "verbatimModuleSyntax",
              "allowSyntheticDefaultImports",
              "esModuleInterop",
              "preserveSymlinks",
              "forceConsistentCasingInFileNames",
              /* Type Checking */
              "strict",
              "strictBindCallApply",
              "strictFunctionTypes",
              "strictNullChecks",
              "strictPropertyInitialization",
              "allowUnreachableCode",
              "allowUnusedLabels",
              "alwaysStrict",
              "exactOptionalPropertyTypes",
              "noFallthroughCasesInSwitch",
              "noImplicitAny",
              "noImplicitOverride",
              "noImplicitReturns",
              "noImplicitThis",
              "noPropertyAccessFromIndexSignature",
              "noUncheckedIndexedAccess",
              "noUnusedLocals",
              "noUnusedParameters",
              "useUnknownInCatchVariables",
              /* Completeness */
              "skipDefaultLibCheck",
              "skipLibCheck",
            ],
          },
        ],
      },
    },
    {
      files: ["*.d.ts"],
      rules: {
        "import/no-duplicates": "off",
        "unused-imports/no-unused-vars": "off",
        "eslint-comments/no-unlimited-disable": "off",
      },
    },
    {
      files: ["*.test.js", "*.spec.js"],
      rules: {
        "no-unused-expressions": "off",
        "unicorn/no-null": "off",
        "unicorn/no-useless-undefined": "off",
      },
    },
  ],
  rules: {
    "import/order": "error",
    "import/no-mutable-exports": "error",
    "import/no-unresolved": "off",
    "import/newline-after-import": ["error", { count: 1, considerComments: true }],

    "unused-imports/no-unused-imports": "error",
    "no-unused-vars": "off",
    "unused-imports/no-unused-vars": [
      "warn",
      {
        vars: "all",
        varsIgnorePattern: "^_",
        args: "after-used",
        argsIgnorePattern: "^_",
      },
    ],

    "no-restricted-syntax": ["error", "ForInStatement", "DebuggerStatement", "LabeledStatement", "WithStatement"],

    "prefer-arrow-callback": [
      "error",
      {
        allowNamedFunctions: false,
        allowUnboundThis: true,
      },
    ],

    "prefer-exponentiation-operator": "error",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "error",

    "object-shorthand": ["error", "always", { ignoreConstructors: false, avoidQuotes: true }],
    "require-await": "error",
    "block-scoped-var": "error",
    "no-invalid-this": "error",
    "vars-on-top": "error",
    "no-void": ["error", { allowAsStatement: true }],

    "n/prefer-global/buffer": ["error", "always"],
    "n/prefer-global/console": ["error", "always"],
    "n/prefer-global/process": ["error", "always"],
    "n/prefer-global/text-decoder": ["error", "always"],
    "n/prefer-global/text-encoder": ["error", "always"],
    "n/prefer-global/url-search-params": ["error", "always"],
    "n/prefer-global/url": ["error", "always"],

    "n/no-extraneous-import": "off",
    "n/no-missing-import": "off",
    "eslint-comments/disable-enable-pair": "off",
    "unicorn/filename-case": "off",
    "unicorn/consistent-function-scoping": "off",
    "unicorn/prevent-abbreviations": "off",
    "unicorn/prefer-top-level-await": "off",
    "unicorn/prefer-string-replace-all": "off",

    "no-restricted-globals": [
      "error",
      { name: "global", message: "Use `globalThis` instead." },
      { name: "self", message: "Use `globalThis` instead." },
    ],

    "no-restricted-properties": [
      "error",
      { property: "__proto__", message: "Use `Object.getPrototypeOf` or `Object.setPrototypeOf` instead." },
      { property: "__defineGetter__", message: "Use `Object.defineProperty` instead." },
      { property: "__defineSetter__", message: "Use `Object.defineProperty` instead." },
      { property: "__lookupGetter__", message: "Use `Object.getOwnPropertyDescriptor` instead." },
      { property: "__lookupSetter__", message: "Use `Object.getOwnPropertyDescriptor` instead." },
    ],

    "sort-imports": [
      "error",
      {
        ignoreCase: false,
        ignoreDeclarationSort: true,
        ignoreMemberSort: false,
        memberSyntaxSortOrder: ["none", "all", "multiple", "single"],
        allowSeparatedGroups: false,
      },
    ],
  },
};
